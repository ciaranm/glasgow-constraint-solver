#include <gcs/constraints/equals.hh>
#include <gcs/problem.hh>
#include <gcs/solve.hh>

#include <iostream>
#include <string>

#include <boost/program_options.hpp>
#include <gcs/constraints/comparison.hh>
#include <gcs/constraints/inverse.hh>
#include <gcs/constraints/table.hh>

using namespace gcs;

using std::cerr;
using std::cout;
using std::endl;
using std::make_optional;
using std::nullopt;
using std::string;
using std::vector;

namespace po = boost::program_options;

auto main(int argc, char * argv[]) -> int
{
    po::options_description display_options{"Program options"};
    display_options.add_options()            //
        ("help", "Display help information") //
        ("prove", "Create a proof");         //

    po::options_description all_options{"All options"};

    //    all_options.add_options()(
    //        "n", po::value<int>()->default_value(3), "Integer value n.") //
    //        ;
    all_options.add_options() //
        ("lp", "Use LP justifications");

    all_options.add(display_options);
    po::variables_map options_vars;

    try {
        po::store(po::command_line_parser(argc, argv)
                      .options(all_options)
                      .run(),
            options_vars);
        po::notify(options_vars);
    }
    catch (const po::error & e) {
        cerr << "Error: " << e.what() << endl;
        cerr << "Try " << argv[0] << " --help" << endl;
        return EXIT_FAILURE;
    }

    if (options_vars.contains("help")) {
        cout << "Usage: " << argv[0] << " [options] [size]" << endl;
        cout << endl;
        cout << display_options << endl;
        return EXIT_SUCCESS;
    }

    //    auto n = options_vars["n"].as<int>();
    vector<vector<int>> layout = {
        {30, 29, 7},
        {44, 49, 18},
        {36, 11, 46},
        {23, 8, 17},
        {15, 39, 19},
        {37, 35, 48},
        {10, 32, 50},
        {38, 9, 13},
        {2, 26, 45},
        {28, 1, 34},
        {3, 31, 16},
        {14, 12, 4},
        {22, 33, 27},
        {47, 20, 51},
        {21, 5, 41},
        {43, 40, 25},
        {24, 42, 6}};

    vector<vector<Integer>> neighbors = {
        {1_i, 2_i},
        {1_i, 13_i},
        {1_i, 15_i},
        {1_i, 26_i},
        {1_i, 28_i},
        {1_i, 39_i},
        {1_i, 41_i},
        {1_i, 52_i},
        {2_i, 1_i},
        {2_i, 3_i},
        {2_i, 14_i},
        {2_i, 16_i},
        {2_i, 27_i},
        {2_i, 29_i},
        {2_i, 40_i},
        {2_i, 42_i},
        {3_i, 2_i},
        {3_i, 4_i},
        {3_i, 15_i},
        {3_i, 17_i},
        {3_i, 28_i},
        {3_i, 30_i},
        {3_i, 41_i},
        {3_i, 43_i},
        {4_i, 3_i},
        {4_i, 5_i},
        {4_i, 16_i},
        {4_i, 18_i},
        {4_i, 29_i},
        {4_i, 31_i},
        {4_i, 42_i},
        {4_i, 44_i},
        {5_i, 4_i},
        {5_i, 6_i},
        {5_i, 17_i},
        {5_i, 19_i},
        {5_i, 30_i},
        {5_i, 32_i},
        {5_i, 43_i},
        {5_i, 45_i},
        {6_i, 5_i},
        {6_i, 7_i},
        {6_i, 18_i},
        {6_i, 20_i},
        {6_i, 31_i},
        {6_i, 33_i},
        {6_i, 44_i},
        {6_i, 46_i},
        {7_i, 6_i},
        {7_i, 8_i},
        {7_i, 19_i},
        {7_i, 21_i},
        {7_i, 32_i},
        {7_i, 34_i},
        {7_i, 45_i},
        {7_i, 47_i},
        {8_i, 7_i},
        {8_i, 9_i},
        {8_i, 20_i},
        {8_i, 22_i},
        {8_i, 33_i},
        {8_i, 35_i},
        {8_i, 46_i},
        {8_i, 48_i},
        {9_i, 8_i},
        {9_i, 10_i},
        {9_i, 21_i},
        {9_i, 23_i},
        {9_i, 34_i},
        {9_i, 36_i},
        {9_i, 47_i},
        {9_i, 49_i},
        {10_i, 9_i},
        {10_i, 11_i},
        {10_i, 22_i},
        {10_i, 24_i},
        {10_i, 35_i},
        {10_i, 37_i},
        {10_i, 48_i},
        {10_i, 50_i},
        {11_i, 10_i},
        {11_i, 12_i},
        {11_i, 23_i},
        {11_i, 25_i},
        {11_i, 36_i},
        {11_i, 38_i},
        {11_i, 49_i},
        {11_i, 51_i},
        {12_i, 11_i},
        {12_i, 13_i},
        {12_i, 24_i},
        {12_i, 26_i},
        {12_i, 37_i},
        {12_i, 39_i},
        {12_i, 50_i},
        {12_i, 52_i},
        {13_i, 1_i},
        {13_i, 12_i},
        {13_i, 14_i},
        {13_i, 25_i},
        {13_i, 27_i},
        {13_i, 38_i},
        {13_i, 40_i},
        {13_i, 51_i},
        {14_i, 2_i},
        {14_i, 13_i},
        {14_i, 15_i},
        {14_i, 26_i},
        {14_i, 28_i},
        {14_i, 39_i},
        {14_i, 41_i},
        {14_i, 52_i},
        {15_i, 1_i},
        {15_i, 3_i},
        {15_i, 14_i},
        {15_i, 16_i},
        {15_i, 27_i},
        {15_i, 29_i},
        {15_i, 40_i},
        {15_i, 42_i},
        {16_i, 2_i},
        {16_i, 4_i},
        {16_i, 15_i},
        {16_i, 17_i},
        {16_i, 28_i},
        {16_i, 30_i},
        {16_i, 41_i},
        {16_i, 43_i},
        {17_i, 3_i},
        {17_i, 5_i},
        {17_i, 16_i},
        {17_i, 18_i},
        {17_i, 29_i},
        {17_i, 31_i},
        {17_i, 42_i},
        {17_i, 44_i},
        {18_i, 4_i},
        {18_i, 6_i},
        {18_i, 17_i},
        {18_i, 19_i},
        {18_i, 30_i},
        {18_i, 32_i},
        {18_i, 43_i},
        {18_i, 45_i},
        {19_i, 5_i},
        {19_i, 7_i},
        {19_i, 18_i},
        {19_i, 20_i},
        {19_i, 31_i},
        {19_i, 33_i},
        {19_i, 44_i},
        {19_i, 46_i},
        {20_i, 6_i},
        {20_i, 8_i},
        {20_i, 19_i},
        {20_i, 21_i},
        {20_i, 32_i},
        {20_i, 34_i},
        {20_i, 45_i},
        {20_i, 47_i},
        {21_i, 7_i},
        {21_i, 9_i},
        {21_i, 20_i},
        {21_i, 22_i},
        {21_i, 33_i},
        {21_i, 35_i},
        {21_i, 46_i},
        {21_i, 48_i},
        {22_i, 8_i},
        {22_i, 10_i},
        {22_i, 21_i},
        {22_i, 23_i},
        {22_i, 34_i},
        {22_i, 36_i},
        {22_i, 47_i},
        {22_i, 49_i},
        {23_i, 9_i},
        {23_i, 11_i},
        {23_i, 22_i},
        {23_i, 24_i},
        {23_i, 35_i},
        {23_i, 37_i},
        {23_i, 48_i},
        {23_i, 50_i},
        {24_i, 10_i},
        {24_i, 12_i},
        {24_i, 23_i},
        {24_i, 25_i},
        {24_i, 36_i},
        {24_i, 38_i},
        {24_i, 49_i},
        {24_i, 51_i},
        {25_i, 11_i},
        {25_i, 13_i},
        {25_i, 24_i},
        {25_i, 26_i},
        {25_i, 37_i},
        {25_i, 39_i},
        {25_i, 50_i},
        {25_i, 52_i},
        {26_i, 1_i},
        {26_i, 12_i},
        {26_i, 14_i},
        {26_i, 25_i},
        {26_i, 27_i},
        {26_i, 38_i},
        {26_i, 40_i},
        {26_i, 51_i},
        {27_i, 2_i},
        {27_i, 13_i},
        {27_i, 15_i},
        {27_i, 26_i},
        {27_i, 28_i},
        {27_i, 39_i},
        {27_i, 41_i},
        {27_i, 52_i},
        {28_i, 1_i},
        {28_i, 3_i},
        {28_i, 14_i},
        {28_i, 16_i},
        {28_i, 27_i},
        {28_i, 29_i},
        {28_i, 40_i},
        {28_i, 42_i},
        {29_i, 2_i},
        {29_i, 4_i},
        {29_i, 15_i},
        {29_i, 17_i},
        {29_i, 28_i},
        {29_i, 30_i},
        {29_i, 41_i},
        {29_i, 43_i},
        {30_i, 3_i},
        {30_i, 5_i},
        {30_i, 16_i},
        {30_i, 18_i},
        {30_i, 29_i},
        {30_i, 31_i},
        {30_i, 42_i},
        {30_i, 44_i},
        {31_i, 4_i},
        {31_i, 6_i},
        {31_i, 17_i},
        {31_i, 19_i},
        {31_i, 30_i},
        {31_i, 32_i},
        {31_i, 43_i},
        {31_i, 45_i},
        {32_i, 5_i},
        {32_i, 7_i},
        {32_i, 18_i},
        {32_i, 20_i},
        {32_i, 31_i},
        {32_i, 33_i},
        {32_i, 44_i},
        {32_i, 46_i},
        {33_i, 6_i},
        {33_i, 8_i},
        {33_i, 19_i},
        {33_i, 21_i},
        {33_i, 32_i},
        {33_i, 34_i},
        {33_i, 45_i},
        {33_i, 47_i},
        {34_i, 7_i},
        {34_i, 9_i},
        {34_i, 20_i},
        {34_i, 22_i},
        {34_i, 33_i},
        {34_i, 35_i},
        {34_i, 46_i},
        {34_i, 48_i},
        {35_i, 8_i},
        {35_i, 10_i},
        {35_i, 21_i},
        {35_i, 23_i},
        {35_i, 34_i},
        {35_i, 36_i},
        {35_i, 47_i},
        {35_i, 49_i},
        {36_i, 9_i},
        {36_i, 11_i},
        {36_i, 22_i},
        {36_i, 24_i},
        {36_i, 35_i},
        {36_i, 37_i},
        {36_i, 48_i},
        {36_i, 50_i},
        {37_i, 10_i},
        {37_i, 12_i},
        {37_i, 23_i},
        {37_i, 25_i},
        {37_i, 36_i},
        {37_i, 38_i},
        {37_i, 49_i},
        {37_i, 51_i},
        {38_i, 11_i},
        {38_i, 13_i},
        {38_i, 24_i},
        {38_i, 26_i},
        {38_i, 37_i},
        {38_i, 39_i},
        {38_i, 50_i},
        {38_i, 52_i},
        {39_i, 1_i},
        {39_i, 12_i},
        {39_i, 14_i},
        {39_i, 25_i},
        {39_i, 27_i},
        {39_i, 38_i},
        {39_i, 40_i},
        {39_i, 51_i},
        {40_i, 2_i},
        {40_i, 13_i},
        {40_i, 15_i},
        {40_i, 26_i},
        {40_i, 28_i},
        {40_i, 39_i},
        {40_i, 41_i},
        {40_i, 52_i},
        {41_i, 1_i},
        {41_i, 3_i},
        {41_i, 14_i},
        {41_i, 16_i},
        {41_i, 27_i},
        {41_i, 29_i},
        {41_i, 40_i},
        {41_i, 42_i},
        {42_i, 2_i},
        {42_i, 4_i},
        {42_i, 15_i},
        {42_i, 17_i},
        {42_i, 28_i},
        {42_i, 30_i},
        {42_i, 41_i},
        {42_i, 43_i},
        {43_i, 3_i},
        {43_i, 5_i},
        {43_i, 16_i},
        {43_i, 18_i},
        {43_i, 29_i},
        {43_i, 31_i},
        {43_i, 42_i},
        {43_i, 44_i},
        {44_i, 4_i},
        {44_i, 6_i},
        {44_i, 17_i},
        {44_i, 19_i},
        {44_i, 30_i},
        {44_i, 32_i},
        {44_i, 43_i},
        {44_i, 45_i},
        {45_i, 5_i},
        {45_i, 7_i},
        {45_i, 18_i},
        {45_i, 20_i},
        {45_i, 31_i},
        {45_i, 33_i},
        {45_i, 44_i},
        {45_i, 46_i},
        {46_i, 6_i},
        {46_i, 8_i},
        {46_i, 19_i},
        {46_i, 21_i},
        {46_i, 32_i},
        {46_i, 34_i},
        {46_i, 45_i},
        {46_i, 47_i},
        {47_i, 7_i},
        {47_i, 9_i},
        {47_i, 20_i},
        {47_i, 22_i},
        {47_i, 33_i},
        {47_i, 35_i},
        {47_i, 46_i},
        {47_i, 48_i},
        {48_i, 8_i},
        {48_i, 10_i},
        {48_i, 21_i},
        {48_i, 23_i},
        {48_i, 34_i},
        {48_i, 36_i},
        {48_i, 47_i},
        {48_i, 49_i},
        {49_i, 9_i},
        {49_i, 11_i},
        {49_i, 22_i},
        {49_i, 24_i},
        {49_i, 35_i},
        {49_i, 37_i},
        {49_i, 48_i},
        {49_i, 50_i},
        {50_i, 10_i},
        {50_i, 12_i},
        {50_i, 23_i},
        {50_i, 25_i},
        {50_i, 36_i},
        {50_i, 38_i},
        {50_i, 49_i},
        {50_i, 51_i},
        {51_i, 11_i},
        {51_i, 13_i},
        {51_i, 24_i},
        {51_i, 26_i},
        {51_i, 37_i},
        {51_i, 39_i},
        {51_i, 50_i},
        {51_i, 52_i},
        {52_i, 1_i},
        {52_i, 12_i},
        {52_i, 14_i},
        {52_i, 25_i},
        {52_i, 27_i},
        {52_i, 38_i},
        {52_i, 40_i},
        {52_i, 51_i},
    };
    Problem p;
    auto card_at_pos = p.create_integer_variable_vector(52, 1_i, 52_i, "x");
    auto pos_of_card = p.create_integer_variable_vector(52, 1_i, 52_i, "y");

    // Ace of spades is the first card
    p.post(Equals{card_at_pos[0], 1_c});

    // Consecutive cards match
    for (int i = 0; i < 51; i++) {
        p.post(Table{{card_at_pos[i], card_at_pos[i + 1]}, neighbors});
    }

    p.post(Inverse{card_at_pos, pos_of_card, 1_i, 1_i, options_vars.contains("lp") ? make_optional(LPJustificationOptions{}) : nullopt});

    // A card must be played before the one under it
    for (int i = 0; i < 17; i++) {
        for (int j = 0; j < 2; j++) {
            p.post(LessThan{
                pos_of_card[layout[i][j]], pos_of_card[layout[i][j + 1]]});
        }
    }

    auto stats = solve_with(p,
        SolveCallbacks{
            .solution = [&](const CurrentState & s) -> bool {
                cout << "Solution:" << endl;
                return false;
            },
        },
        options_vars.contains("prove") ? make_optional<ProofOptions>("black_hole") : nullopt);

    cout << stats;

    return EXIT_SUCCESS;
}
